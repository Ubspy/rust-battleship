initSidebarItems({"enum":[["ColorDepth","Defines the color depth for drawing and rgb images"],["Cursor","Defines the cursor styles supported by fltk"],["FrameType","Defines the frame types which can be set using the `set_frame()` and `set_down_frame()` methods"],["LabelType","Defines label types"]],"struct":[["Align","Defines alignment rules used by FLTK for labels"],["CallbackTrigger","Defines the types of triggers for widget callback functions. Equivalent to FL_WHEN"],["Color","Defines colors used by FLTK. Colors are stored as RGBI values, the last being the index for FLTK colors in this enum. Colors in this enum don’t have an RGB stored. However, custom colors have an RGB, and don’t have an index. The RGBI can be acquired by casting the color to u32 and formatting it to `0x{08x}`. The last 2 digits are the hexadecimal representation of the color in this enum. For example, Color::White, has a hex of 0x000000ff, ff being the 255 value of this enum. A custom color like Color::from_u32(0x646464), will have an representation as 0x64646400, of which the final 00 indicates that it is not stored in this enum. For convenience, the fmt::Display trait is implemented so that the name of the Color is shown when there is one, otherwise the RGB value is given."],["Damage","Damage masks"],["Event","Defines event types captured by FLTK"],["Font","Defines fonts used by FLTK"],["Key","Defines the inputted virtual keycode"],["Mode","Defines visual mode types (capabilites of the window). Rgb and Single have a value of zero, so they are “on” unless you give Index or Double."],["Shortcut","Defines the modifiers of virtual keycodes"]],"type":[["EventState","Alias reflecting FLTK’s name"]]});